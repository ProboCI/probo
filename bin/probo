#! /usr/bin/env node
'use strict';

const path = require('path');
const util = require('util');
const Loader = require('yaml-config-loader');
let yargs = require('yargs');

const loader = new Loader();

loader.on('error', function (error) {
  if (error.name === 'YAMLException') {
    console.error(
      util.print(
        'Error parsing YAML file `',
        error.filePath,
        '`:',
        error.reason
      )
    );
    console.log(error);
  }
});

const probo = require('../index');

const argv = yargs
  .describe(
    'config',
    'A YAML config file or directory of yaml files to load, can be invoked multiple times and later files will override earlier.'
  )
  .alias('config', 'c').argv;

loader.add(path.resolve(path.join(__dirname, '..', 'defaults.yaml')));
loader.addAndNormalizeObject(process.env);

const commandName = argv._[0];

probo.cli.loadCommands(function (error, commands) {
  if (error) throw error;

  if (commandName == undefined) {
    commandName = 'help';
  }

  if (!commands[commandName]) {
    console.error('ERROR: Unknown command `' + commandName + '`');
    console.error('');
    console.error('run `probo help` for a list of available commands.');
    process.exit(1);
  }

  if (argv.config) {
    if (typeof argv.config === 'string') {
      argv.config = [argv.config];
    }
    for (var i in argv.config) {
      loader.add(path.resolve(argv.config[i]));
    }
  }

  var executor = commands[commandName];

  if (executor.options) {
    yargs = executor.options(yargs);
    var setOptions = {};
    var key = null;
    for (key in yargs.argv) {
      if (yargs.argv[key] !== undefined) {
        setOptions[key] = yargs.argv[key];
      }
    }
    loader.addAndNormalizeObject(setOptions);
  }

  loader.load(function (error, config) {
    if (error) throw error;
    if (executor.configure) {
      executor.configure(config);
    }
    probo.config = config;
    executor.run(probo);
  });
});
